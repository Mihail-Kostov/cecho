#!/usr/bin/env bash
VERSION="v0.2"

function usage() {
cat <<EOF
DESCRIPTION:
  Just like echo, but with some colour.

USAGE:
  $(basename $0) [OPTION] [string ...]

OPTIONS:
  -n                Do not output the trailing newline.
  --inline          Allow inline colour changes.

  --centre          Center the text in the terminal.
  --right           Align the text to the right side of terminal.
  --doublespace     Add spaces between each of the letters.

  --margin          Set the width of the left and right margins.
  --margin-left     Set the width of the left margin.
  --margin-right    Set the width of the right margin.

  --show-colours    Show available colours.
  --background      Set the background colour.
  --foreground      Set the background colour.

  --black           Shorthand for setting foreground to black.
  --blue            Shorthand for setting foreground to blue.
  --cyan            Shorthand for setting foreground to cyan.
  --dark-blue       Shorthand for setting foreground to dark-blue.
  --dark-gray       Shorthand for setting foreground to dark-gray.
  --dark-green      Shorthand for setting foreground to dark-green.
  --dark-grey       Shorthand for setting foreground to dark-grey.
  --green           Shorthand for setting foreground to green.
  --grey            Shorthand for setting foreground to grey.
  --light-blue      Shorthand for setting foreground to light-blue.
  --light-cyan      Shorthand for setting foreground to light-cyan.
  --light-green     Shorthand for setting foreground to light-green.
  --light-grey      Shorthand for setting foreground to light-grey.
  --light-magenta   Shorthand for setting foreground to light-magenta.
  --light-red       Shorthand for setting foreground to light-red.
  --light-yellow    Shorthand for setting foreground to light-yellow.
  --magenta         Shorthand for setting foreground to magenta.
  --red             Shorthand for setting foreground to red.
  --white           Shorthand for setting foreground to white.
  --yellow          Shorthand for setting foreground to yellow.

  --help            This help.
  --version         The version of cecho.

INLINE:
  Need to write documentation on inline colour substitutions.

ENVIRONMENT_VARIABLES:
  COLUMNS           Manually override the width of your terminal.

EXAMPLES:
  Show available colours:
  $0 --show-colours

  Set foreground to red
  $0 --red "string to echo"

  Set background to blue and foreground to white
  $0 --background=blue --foreground=white "string to echo"

  Set the background to a specific colour
  $0 --background=170 "string to echo"

  Set foreground to red and center in terminal
  $0 --centre --red "string to echo"

  Set foreground to green and background to gray for part of a line
  $0 --inline "{F_green}{B_grey}string to{reset} echo"

EOF
exit 0
}

function colour() {
  case "$1" in
    "blue")           echo "4"  ;;
    "cyan")           echo "6"  ;;
    "dark-blue")      echo "17" ;;
    "dark-gray")      echo "8"  ;;
    "dark-green")     echo "22" ;;
    "dark-grey")      echo "8"  ;;
    "green")          echo "2"  ;;
    "grey"|"gray")    echo "7"  ;;
    "light-blue")     echo "12" ;;
    "light-cyan")     echo "14" ;;
    "light-gray")     echo "7"  ;;
    "light-green")    echo "10" ;;
    "light-grey")     echo "7"  ;;
    "light-magenta")  echo "13" ;;
    "light-red")      echo "9"  ;;
    "light-yellow")   echo "11" ;;
    "magenta")        echo "5"  ;;
    "red")            echo "1"  ;;
    "yellow")         echo "3"  ;;
    "white")          echo "15" ;;
    "black")          echo "0" ;;
    "reset")          echo -n "[m" ;;
    *)                echo $1   ;;
  esac
}

function swatch() {
  for i in {0..255}; do
    $0 --background=$i -n "  $(printf "%03d\n" $i)  "

    case $i in
      7|15|21|27|33|39|45|57|63|69|75|81|93|99|105|111|117|129|135|141) echo ;;
      147|153|165|171|177|183|189|201|207|245) echo ;;
      16|51|87|123|159|195|213) echo; echo ;;
    esac
  done

  echo
  exit 1
}

function read_switch() {
  switch="$(printf -- "$1" | cut -d= -f1)"
  value="$(printf -- "$1"  | cut -d= -f2-)"

  # set switch and value for alias options
  case "${switch}" in
    "--black")          switch="--foreground"; value="black"        ;;
    "--blue"|"-b")      switch="--foreground"; value="blue"         ;;
    "--center"|"-C")    switch="--centre"                           ;;
    "--cyan"|"-c")      switch="--foreground"; value="cyan"         ;;
    "--dark-blue")      switch="--foreground"; value="dark-blue"    ;;
    "--dark-gray")      switch="--foreground"; value="dark-gray"    ;;
    "--dark-green")     switch="--foreground"; value="dark-green"   ;;
    "--dark-grey")      switch="--foreground"; value="dark-grey"    ;;
    "--green"|"-g")     switch="--foreground"; value="green"        ;;
    "--grey"|"-G")      switch="--foreground"; value="grey"         ;;
    "--light-blue")     switch="--foreground"; value="light-blue"   ;;
    "--light-cyan")     switch="--foreground"; value="light-cyan"   ;;
    "--light-gray")     switch="--foreground"; value="light-gray"   ;;
    "--light-green")    switch="--foreground"; value="light-green"  ;;
    "--light-grey")     switch="--foreground"; value="light-grey"   ;;
    "--light-magenta")  switch="--foreground"; value="light-magenta";;
    "--light-red")      switch="--foreground"; value="light-red"    ;;
    "--light-yellow")   switch="--foreground"; value="light-yellow" ;;
    "--magenta"|"-m")   switch="--foreground"; value="magenta"      ;;
    "--red"|"-r")       switch="--foreground"; value="red"          ;;
    "--show-colors")    switch="--show-colours"                     ;;
    "--white")          switch="--foreground"; value="white"        ;;
    "--yellow"|"-y")    switch="--foreground"; value="yellow"       ;;
    "-I")               switch="--inline"                           ;;
    "-R")               switch="--right"                            ;;
  esac

  # run through the real options
  case "${switch}" in
    "--background")     background=$(colour_background ${value})    ;;
    "--centre")         align="centre"                              ;;
    "--doublespace")    doublespace=true                            ;;
    "--foreground")     foreground=$(colour_foreground ${value})    ;;
    "--help")           usage                                       ;;
    "--inline")         inline=true                                 ;;
    "--margin")         margin_left=${value}; margin_right=${value} ;;
    "--margin-left")    margin_left=${value};                       ;;
    "--margin-right")   margin_right=${value};                      ;;
    "--right")          align="right"                               ;;
    "--show-colours")   swatch                                      ;;
    "--version")        echo ${VERSION} && exit 0                   ;;
    "--no-reset")       reset=false                                 ;;
    "-n")               line_ending=""                              ;;
    *)
      string="$1"
      if [[ -z "${strings}" ]]; then
        strings="$string"
      else
        strings+="\ $string"
      fi
    ;;
  esac
}

function sub_inline_colour() {
  string="$@"
  string=$(echo "$string" | sed -E "s/\{F_([^}]+)\}/\$\(colour_foreground \1\)/g")
  string=$(echo "$string" | sed -E "s/\{B_([^}]+)\}/\$\(colour_background \1\)/g")
  string=$(echo "$string" | sed -E "s/\{reset\}/\$\(colour reset)/g")
  string=$(echo "$string" | sed -E 's/"/\\\"/g')
  eval "echo \"${string}\"" | sed 's/{\ *}//g'
}

function colour_foreground() {
  tput setaf $(colour $1)
}

function colour_background() {
  tput setab $(colour $1)
}

function align_centre() {
  string="$@"
  [[ ! -z ${COLUMNS} ]] || COLUMNS=$(tput cols)
  local str_length=${#string}
  local col_centre=$(( $COLUMNS / 2 ))
  local str_centre=$(( $str_length / 2 ))
  local str_start_col=$(( $col_centre - $str_centre ))
  unset IFS
  for n in $(seq $str_start_col); do
     printf " "
  done
  echo "$@"
}

function align_right() {
  string="$@"
  [[ ! -z ${COLUMNS} ]] || COLUMNS=$(tput cols)
  local str_length=${#string}
  local str_start_col=$(( $COLUMNS - $str_length ))
  unset IFS
  for n in $(seq $str_start_col); do
    printf " "
  done
  echo "$@"
}

function doublespace() {
  if [[ ${align} == "right" ]]; then
    echo "$@" | sed -E "s/(.)/ \1/g"
  else
    echo "$@" | sed -E "s/(.)/\1 /g"
  fi
}

function add_margins() {
  local text_width=$(( $(tput cols) - ${margin_left} - ${margin_right} ))
  local m=""

  case $align in
    "left")
      if [[ $margin_left -ne 0 ]]; then
        unset IFS
        for n in $(seq $margin_left); do m+=" "; done
      fi

      echo "${@}" | fold -w ${text_width} -s | sed "s/^/$m/"
      ;;

    "centre") align_centre "$@";;

    "right")
      if [[ $margin_right -ne 0 ]]; then
        for n in $(seq $margin_right); do m+=" "; done
      fi

      echo "${@}" | sed "s/$/$m/"
      ;;
  esac
}

### DEFAULTS ##################################################################
align="left"
doublespace=false
inline=false
line_ending="\n"
margin_left=0
margin_right=0
reset=true
###############################################################################

for arg in "$@"; do
  read_switch "${arg}"
done

IFS=''
line=0
printf -- "${foreground}${background}"
printf -- "${strings}\n" | while read string; do
  [[ $line -ne 0 ]] && printf -- "\n"
  [[ -z "$string" ]] && continue
  ${inline} && string=$(sub_inline_colour "${string}")
  ${doublespace} && string=$(doublespace "${string}")
  string=$(add_margins "${string}")
  [[ $align == "right" ]] && string=$(align_right "${string}")
  printf -- "${string}"
  line=$(( $line + 1 ))
done

${reset} && echo -n "[m"
printf -- "${line_ending}"
